{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gkscj\\\\Desktop\\\\schedule-expenditure-project\\\\my-app\\\\src\\\\socket_test\\\\login_test.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:3001\");\n\n// 테스트 페이지 나중에 login 페이지와 연결시 몇가지를 가져다 사용할 예정\nfunction Login() {\n  _s();\n  const [state, setState] = useState({\n    id: \"\",\n    pw: \"\",\n    Duplicate: 1,\n    pre_Duple: 0\n  });\n  function handleChange(e) {\n    setState({\n      ...state,\n      [e.target.name]: e.target.value\n    });\n  }\n  function send_msg() {\n    socket.emit(\"Send Duplicate Check\", {\n      id: state.id,\n      pre_Duplecate: state.pre_Duple\n    });\n    setState({\n      ...state,\n      id: \"\",\n      pre_Duple: state.pre_Duple\n    });\n  }\n\n  // useEffect(() => {\n  //   console.log(\"user 값이 설정됨\");\n  //   console.log(state.Duplicate);\n  //   return () => {\n  //     console.log(\"user 가 바뀌기 전..\");\n  //     console.log(state.Duplicate);\n  //   };\n  // }, [state.Duplicate]);\n\n  function user_update() {\n    // socket.disconnect();\n  }\n  async function pre_id_Check() {\n    if (state.id === \"\") {\n      alert(\"아이디를 입력해주세요.\");\n    } else {\n      await send_msg();\n      if (state.Duplicate === 0) {\n        alert(\"0 입니다.\");\n      } else if (state.Duplicate === 1) {\n        alert(\"1 입니다.\");\n      } else {\n        alert(\"2 입니다.\");\n      }\n    }\n  }\n  function Duplicate_check() {\n    send_msg();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"id\",\n        placeholder: \"id\",\n        value: state.id,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"pw\",\n        placeholder: \"pw\",\n        value: state.pw,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: send_msg,\n        children: \"\\uC804\\uC1A1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"aTLUj72avftRBmCkkO2b5diqRFU=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","io","jsxDEV","_jsxDEV","socket","Login","_s","state","setState","id","pw","Duplicate","pre_Duple","handleChange","e","target","name","value","send_msg","emit","pre_Duplecate","user_update","pre_id_Check","alert","Duplicate_check","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/gkscj/Desktop/schedule-expenditure-project/my-app/src/socket_test/login_test.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport io from \"socket.io-client\";\r\nconst socket = io(\"http://localhost:3001\");\r\n\r\n// 테스트 페이지 나중에 login 페이지와 연결시 몇가지를 가져다 사용할 예정\r\nfunction Login() {\r\n  const [state, setState] = useState({\r\n    id: \"\",\r\n    pw: \"\",\r\n    Duplicate: 1,\r\n    pre_Duple: 0,\r\n  });\r\n\r\n  function handleChange(e: any) {\r\n    setState({\r\n      ...state,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  }\r\n\r\n  function send_msg() {\r\n    socket.emit(\"Send Duplicate Check\", {\r\n      id: state.id,\r\n      pre_Duplecate: state.pre_Duple,\r\n    });\r\n    setState({\r\n      ...state,\r\n      id: \"\",\r\n      pre_Duple: state.pre_Duple,\r\n    });\r\n  }\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"user 값이 설정됨\");\r\n  //   console.log(state.Duplicate);\r\n  //   return () => {\r\n  //     console.log(\"user 가 바뀌기 전..\");\r\n  //     console.log(state.Duplicate);\r\n  //   };\r\n  // }, [state.Duplicate]);\r\n\r\n  function user_update() {\r\n    // socket.disconnect();\r\n  }\r\n\r\n  async function pre_id_Check() {\r\n    if (state.id === \"\") {\r\n      alert(\"아이디를 입력해주세요.\");\r\n    } else {\r\n      await send_msg();\r\n\r\n      if (state.Duplicate === 0) {\r\n        alert(\"0 입니다.\");\r\n      } else if (state.Duplicate === 1) {\r\n        alert(\"1 입니다.\");\r\n      } else {\r\n        alert(\"2 입니다.\");\r\n      }\r\n    }\r\n  }\r\n\r\n  function Duplicate_check() {\r\n    send_msg();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form>\r\n        <input\r\n          type=\"text\"\r\n          name=\"id\"\r\n          placeholder=\"id\"\r\n          value={state.id}\r\n          onChange={handleChange}\r\n        ></input>\r\n        <input\r\n          type=\"password\"\r\n          name=\"pw\"\r\n          placeholder=\"pw\"\r\n          value={state.pw}\r\n          onChange={handleChange}\r\n        ></input>\r\n        <button type=\"submit\" onClick={send_msg}>\r\n          전송\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\nexport default Login;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}