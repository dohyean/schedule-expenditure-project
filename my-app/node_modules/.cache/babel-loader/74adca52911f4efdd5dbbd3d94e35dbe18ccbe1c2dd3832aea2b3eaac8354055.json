{"ast":null,"code":"function Send_Duplicate(socket, id) {\n  return new Promise((resolve, reject) => {\n    socket.emit(\"Send Duplicate Check\", {\n      id: id\n    });\n    resolve(0);\n  });\n}\n_c = Send_Duplicate;\nfunction Rec_Duplicate(socket) {\n  return new Promise((resolve, reject) => {\n    socket.on(\"Receive Duplicate Check\", message => {\n      resolve(message.Duplicate);\n    });\n  });\n}\n_c2 = Rec_Duplicate;\nexports.Duplicate_check = async function (socket, id) {\n  if (id === \"\") {\n    alert(\"아이디를 입력해주세요.\");\n  } else {\n    await Send_Duplicate(socket, id);\n    var Duplicate = await Rec_Duplicate(socket);\n    if (Duplicate === 2) {\n      alert(\"아이디가 중복됩니다.\");\n    } else if (Duplicate === 1) {\n      alert(\"사용가능한 아이디입니다.\");\n    } else {\n      alert(\"관리지에게 문의하세요.\");\n    }\n  }\n};\n\n// exports.Send_Duplicate = function (socket, id) {\n//   return new Promise((resolve, reject) => {\n//     socket.emit(\"Send Duplicate Check\", {\n//       id: id,\n//     });\n//     resolve(0);\n//   });\n// };\n\n// exports.Rec_Duplicate = function (socket) {\n//   return new Promise((resolve, reject) => {\n//     socket.on(\"Receive Duplicate Check\", (message) => {\n//       resolve(message.Duplicate);\n//     });\n//   });\n// };\nvar _c, _c2;\n$RefreshReg$(_c, \"Send_Duplicate\");\n$RefreshReg$(_c2, \"Rec_Duplicate\");","map":{"version":3,"names":["Send_Duplicate","socket","id","Promise","resolve","reject","emit","_c","Rec_Duplicate","on","message","Duplicate","_c2","exports","Duplicate_check","alert","$RefreshReg$"],"sources":["C:/Users/gkscj/Desktop/schedule-expenditure-project/my-app/src/Components/Function/Create_ID_Duplicate.js"],"sourcesContent":["function Send_Duplicate(socket, id) {\r\n  return new Promise((resolve, reject) => {\r\n    socket.emit(\"Send Duplicate Check\", {\r\n      id: id,\r\n    });\r\n    resolve(0);\r\n  });\r\n}\r\n\r\nfunction Rec_Duplicate(socket) {\r\n  return new Promise((resolve, reject) => {\r\n    socket.on(\"Receive Duplicate Check\", (message) => {\r\n      resolve(message.Duplicate);\r\n    });\r\n  });\r\n}\r\n\r\nexports.Duplicate_check = async function (socket, id) {\r\n  if (id === \"\") {\r\n    alert(\"아이디를 입력해주세요.\");\r\n  } else {\r\n    await Send_Duplicate(socket, id);\r\n    var Duplicate = await Rec_Duplicate(socket);\r\n\r\n    if (Duplicate === 2) {\r\n      alert(\"아이디가 중복됩니다.\");\r\n    } else if (Duplicate === 1) {\r\n      alert(\"사용가능한 아이디입니다.\");\r\n    } else {\r\n      alert(\"관리지에게 문의하세요.\");\r\n    }\r\n  }\r\n};\r\n\r\n// exports.Send_Duplicate = function (socket, id) {\r\n//   return new Promise((resolve, reject) => {\r\n//     socket.emit(\"Send Duplicate Check\", {\r\n//       id: id,\r\n//     });\r\n//     resolve(0);\r\n//   });\r\n// };\r\n\r\n// exports.Rec_Duplicate = function (socket) {\r\n//   return new Promise((resolve, reject) => {\r\n//     socket.on(\"Receive Duplicate Check\", (message) => {\r\n//       resolve(message.Duplicate);\r\n//     });\r\n//   });\r\n// };\r\n"],"mappings":"AAAA,SAASA,cAAcA,CAACC,MAAM,EAAEC,EAAE,EAAE;EAClC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCJ,MAAM,CAACK,IAAI,CAAC,sBAAsB,EAAE;MAClCJ,EAAE,EAAEA;IACN,CAAC,CAAC;IACFE,OAAO,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC;AACJ;AAACG,EAAA,GAPQP,cAAc;AASvB,SAASQ,aAAaA,CAACP,MAAM,EAAE;EAC7B,OAAO,IAAIE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCJ,MAAM,CAACQ,EAAE,CAAC,yBAAyB,EAAGC,OAAO,IAAK;MAChDN,OAAO,CAACM,OAAO,CAACC,SAAS,CAAC;IAC5B,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAACC,GAAA,GANQJ,aAAa;AAQtBK,OAAO,CAACC,eAAe,GAAG,gBAAgBb,MAAM,EAAEC,EAAE,EAAE;EACpD,IAAIA,EAAE,KAAK,EAAE,EAAE;IACba,KAAK,CAAC,cAAc,CAAC;EACvB,CAAC,MAAM;IACL,MAAMf,cAAc,CAACC,MAAM,EAAEC,EAAE,CAAC;IAChC,IAAIS,SAAS,GAAG,MAAMH,aAAa,CAACP,MAAM,CAAC;IAE3C,IAAIU,SAAS,KAAK,CAAC,EAAE;MACnBI,KAAK,CAAC,aAAa,CAAC;IACtB,CAAC,MAAM,IAAIJ,SAAS,KAAK,CAAC,EAAE;MAC1BI,KAAK,CAAC,eAAe,CAAC;IACxB,CAAC,MAAM;MACLA,KAAK,CAAC,cAAc,CAAC;IACvB;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAR,EAAA,EAAAK,GAAA;AAAAI,YAAA,CAAAT,EAAA;AAAAS,YAAA,CAAAJ,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}